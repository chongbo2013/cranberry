////////////////////////////////////////////////////////////////////////////////
//
// Cranberry - C++ game engine based on the Qt 5.8 framework.
// Copyright (C) 2017 Nicolas Kogler
//
// Cranberry is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Cranberry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Cranberry. If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////


#pragma once
#ifndef CRANBERRY_GAME_MAPPING_MAP_HPP
#define CRANBERRY_GAME_MAPPING_MAP_HPP


// Cranberry headers
#include <Cranberry/Game/Mapping/MapLayer.hpp>
#include <Cranberry/Game/Mapping/MapTileset.hpp>
#include <Cranberry/Graphics/Base/RenderBase.hpp>


CRANBERRY_BEGIN_NAMESPACE


////////////////////////////////////////////////////////////////////////////////
/// Loads maps from the Tiled Map Editor (TMX) and provides several virtual
/// functions in order to maximize the ability to customize.
///
/// \class Map
/// \author Nicolas Kogler
/// \date August 18, 2017
///
////////////////////////////////////////////////////////////////////////////////
class CRANBERRY_GAME_EXPORT Map : public RenderBase
{
public:

    CRANBERRY_DISABLE_COPY(Map)
    CRANBERRY_DISABLE_MOVE(Map)

    Map();
    virtual ~Map();


    ////////////////////////////////////////////////////////////////////////////
    /// Determines whether this map is null.
    ///
    /// \returns true if null.
    ///
    ////////////////////////////////////////////////////////////////////////////
    bool isNull() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the orientation of the map.
    ///
    /// \returns the map orientation.
    ///
    ////////////////////////////////////////////////////////////////////////////
    MapOrientation orientation() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the width of the map.
    ///
    /// \returns the map width.
    ///
    ////////////////////////////////////////////////////////////////////////////
    int width() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the height of the map.
    ///
    /// \returns the map height.
    ///
    ////////////////////////////////////////////////////////////////////////////
    int height() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the general grid width of the map.
    ///
    /// \returns the general tile width.
    ///
    ////////////////////////////////////////////////////////////////////////////
    int tileWidth() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the general grid height of the map.
    ///
    /// \returns the general tile height.
    ///
    ////////////////////////////////////////////////////////////////////////////
    int tileHeight() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the back color of the map.
    ///
    /// \returns the background color.
    ///
    ////////////////////////////////////////////////////////////////////////////
    const QColor& backgroundColor() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Retrieves the properties of the map.
    ///
    /// \returns the map properties.
    ///
    ////////////////////////////////////////////////////////////////////////////
    const QMap<QString, QVariant>& properties() const;

    ////////////////////////////////////////////////////////////////////////////
    /// Loads a TMX map from \p mapPath and renders it on \p renderTarget.
    ///
    /// \param mapPath Path to TMX file to load.
    /// \param renderTarget Target to render map on.
    /// \returns true if created successfully.
    ///
    ////////////////////////////////////////////////////////////////////////////
    virtual bool create(const QString& mapPath, Window* renderTarget);

    ////////////////////////////////////////////////////////////////////////////
    /// Destroys all resources allocated by this instance.
    ///
    ////////////////////////////////////////////////////////////////////////////
    virtual void destroy();

    ////////////////////////////////////////////////////////////////////////////
    /// Updates the map.
    ///
    /// \param time Contains the delta time.
    ///
    ////////////////////////////////////////////////////////////////////////////
    virtual void update(const GameTime &time);

    ////////////////////////////////////////////////////////////////////////////
    /// Renders all the layers of the map. Override this method in order to
    /// render a player sprite or something else in between the layers.
    ///
    ////////////////////////////////////////////////////////////////////////////
    virtual void render();


protected:

    const QVector<MapTileset*>& tilesets() const;
    const QVector<MapLayer*>& layers() const;


private:

    ////////////////////////////////////////////////////////////////////////////
    // Members
    ////////////////////////////////////////////////////////////////////////////
    MapOrientation          m_orientation;
    int                     m_width;
    int                     m_height;
    int                     m_tileWidth;
    int                     m_tileHeight;
    QColor                  m_bgColor;
    QVector<MapLayer*>      m_layers;
    QVector<MapTileset*>    m_tilesets;
    QMap<QString, QVariant> m_properties;
};


////////////////////////////////////////////////////////////////////////////////
/// \class Map
/// \ingroup Game
///
/// More detailed description, code examples.
///
/// \code
/// ...
/// \endcode
///
////////////////////////////////////////////////////////////////////////////////


CRANBERRY_END_NAMESPACE


#endif
